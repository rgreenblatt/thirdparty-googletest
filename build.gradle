plugins {
    id 'cpp'
    id 'visual-studio'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '2.1'
    id 'edu.wpi.first.NativeUtils' version '1.7.0'
    id 'de.undercouch.download' version '3.4.3'
}

apply from: 'config.gradle'

def outputsFolder = file("$buildDir/allOutputs")

def googleTestRelease = 'release-1.8.0.zip'
def googleTestFolderName = 'googletest-release-1.8.0'

task getGoogleTest(type: Download) {
    src 'https://github.com/google/googletest/archive/' + googleTestRelease
    dest new File(outputsFolder, googleTestRelease)
    overwrite false
}

task unzipGoogleTest(dependsOn: getGoogleTest, type: Copy) {
    from zipTree(getGoogleTest.dest)
    into buildDir
}
task copyGoogleTest(dependsOn: unzipGoogleTest, type: Copy) {
    from "${buildDir}/" + googleTestFolderName + "/"
    into "${projectDir}/googletest"
}
build.dependsOn unzipGoogleTest

model {
    components {
        googletest(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'googletest/googletest/src'
                        exclude '**/*-all.cc', '**/*_main.cc', '**/*.h'
                    }
                    exportedHeaders {
                        srcDirs 'googletest/googletest/include', 'googletest/googletest'
                        include '**/*.h'
                    }
                }
            }
            binaries.all {
                if (toolChain in VisualCpp) {
                    cppCompiler.args '-D_UNICODE', '-DUNICODE', '-DWIN32',  '-D_WIN32', '-DSTRICT', '-DWIN32_LEAN_AND_MEAN', '-D_HAS_EXCEPTIONS=1'
                } else {
                    cppCompiler.args '-Wshadow', '-fexceptions', '-Wno-missing-field-initializers'
                }
            }
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}

apply from: 'publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}
